# This workflow will build and deploy a docker container to AWS Fargate.

name: Deploy Hotfix

on:
  pull_request:
    types: [labeled, unlabeled, opened, edited, synchronize, converted_to_draft]

jobs:
  # Generate outputs based on json config file that can be used in subsequent jobs
  generate-config:
    if: ${{ (contains(github.event.pull_request.labels.*.name, 'hotfix')) }}
    name: Generate Config
    runs-on: ubuntu-latest
    steps:
      - name: print
        run: echo "generate-config"

  build-test:
    needs: [ generate-config ]
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: print
        run: echo "Build and Test"

  # https://github.com/macmms/github-actions-workflows/blob/main/.github/workflows/deploy-from-ecr-to-ecs.yml
  deploy-staging:
    if: github.event.review.state == 'approved'
    needs: [ generate-config, build-test ]
    name: Deploy Staging
    environment: stg-env
    runs-on: ubuntu-latest
    steps:
      - name: print
        run: echo "deploy-staging"


  draft-release:
    needs: [ deploy-staging ]
    name: Draft Release Notes
    runs-on: self-hosted-central
    outputs:
      release_tag: ${{ steps.draft-release.outputs.tag_name }}
      release_id: ${{ steps.draft-release.outputs.id }}
    steps:
      - name: Draft Release Notes
        uses: release-drafter/release-drafter@v5
        id: draft-release
        with:
          publish: false
          disable-autolabeler: true
          config-name: release-drafter-config.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  replicate-image-prod:
    needs: [ deploy-staging ]
    name: Replicate Image to Production
    runs-on: ubuntu-latest
    steps:
      - name: print
        run: echo "replicate-image-prod"


  publish-release:
    needs: [ draft-release, replicate-image-prod ]
    name: Publish Release
    runs-on: ubuntu-latest
    steps:
      - name: print
        run: echo "publish-release"


  deploy-production:
    needs: [ deploy-staging, replicate-image-prod, publish-release ]
    name: Deploy Production
    environment: prod-env
    runs-on: ubuntu-latest
    steps:
      - name: print
        run: echo "deploy-production"
