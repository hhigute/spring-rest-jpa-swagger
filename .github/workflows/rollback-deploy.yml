# This workflow will build and deploy a docker container to AWS Fargate.

name: Rollback Release Deployment
run-name: Deploy ${{ github.ref_name }} by @${{ github.actor }}
on:
  workflow_dispatch:

concurrency: app-deployment

env:
  CONFIG_FILE_PATH: ".github/deploy-app-config.json"

jobs:
  dump_contexts_to_log:
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
  # Generate outputs based on json config file that can be used in subsequent jobs
  generate-config:
    if: ${{ github.ref_type == 'tag' }}
    name: Generate Config
    runs-on: ubuntu-latest
    outputs:
      develop_ecr_repository: ${{ steps.create-output.outputs.develop_ecr_repository }}
      develop_task_definition_template: ${{ steps.create-output.outputs.develop_task_definition_template }}
      develop_task_definition_family: ${{ steps.create-output.outputs.develop_task_definition_family }}
      develop_container_name: ${{ steps.create-output.outputs.develop_container_name }}
      develop_ecs_cluster: ${{ steps.create-output.outputs.develop_ecs_cluster }}
      develop_ecs_service: ${{ steps.create-output.outputs.develop_ecs_service }}
      develop_ecs_deployment_wait_seconds: ${{ steps.create-output.outputs.develop_ecs_deployment_wait_seconds }}
      develop_run_dd_tests: ${{ steps.create-output.outputs.develop_run_dd_tests }}
      develop_dd_test_id: ${{ steps.create-output.outputs.develop_dd_test_id }}
      develop_send_slack_notifications: ${{ steps.create-output.outputs.develop_send_slack_notifications }}

      staging_ecr_repository: ${{ steps.create-output.outputs.staging_ecr_repository }}
      staging_task_definition_template: ${{ steps.create-output.outputs.staging_task_definition_template }}
      staging_task_definition_family: ${{ steps.create-output.outputs.staging_task_definition_family }}
      staging_container_name: ${{ steps.create-output.outputs.staging_container_name }}
      staging_ecs_cluster: ${{ steps.create-output.outputs.staging_ecs_cluster }}
      staging_ecs_service: ${{ steps.create-output.outputs.staging_ecs_service }}
      staging_run_dd_tests: ${{ steps.create-output.outputs.staging_run_dd_tests }}
      staging_dd_test_id: ${{ steps.create-output.outputs.staging_dd_test_id }}
      staging_send_slack_notifications: ${{ steps.create-output.outputs.staging_send_slack_notifications }}

      cube_ecr_repository: ${{ steps.create-output.outputs.cube_ecr_repository }}
      cube_task_definition_template: ${{ steps.create-output.outputs.cube_task_definition_template }}
      cube_task_definition_family: ${{ steps.create-output.outputs.cube_task_definition_family }}
      cube_container_name: ${{ steps.create-output.outputs.cube_container_name }}
      cube_ecs_cluster: ${{ steps.create-output.outputs.cube_ecs_cluster }}
      cube_ecs_service: ${{ steps.create-output.outputs.cube_ecs_service }}
      cube_run_dd_tests: ${{ steps.create-output.outputs.cube_run_dd_tests }}
      cube_dd_test_id: ${{ steps.create-output.outputs.cube_dd_test_id }}
      cube_send_slack_notifications: ${{ steps.create-output.outputs.cube_send_slack_notifications }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create output
        id: create-output
        run: |
          mapfile -t input_keys < <(jq -r 'keys[]' ${{ env.CONFIG_FILE_PATH }})
          for key in "${input_keys[@]}"
          do
            echo "$key=$(jq -r .$key ${{ env.CONFIG_FILE_PATH }})" >> $GITHUB_OUTPUT
          done

  deploy-stating:
    needs: [ generate-config ]
    name: Deploy Staging
    environment: stg-stg
    runs-on: ubuntu-latest
    steps:
      - name: print
        run: echo "deploy-staging-${{ github.triggering_actor }}"

  deploy-production:
    needs: [ generate-config, deploy-stating ]
    name: Deploy Production
    environment: prod-env
    runs-on: ubuntu-latest
    steps:
      - name: print
        run: echo "deploy-production-${{ github.triggering_actor }}"
